MessageNotUnderstood: UndefinedObject>>valueOfProperty:14 July 2019 4:12:51.766746 pmVM: Win32 - SmalltalkImage: Squeak5.2 [latest update: #18229]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir D:\ContinumTrusted Dir D:\Continum\GrahamUntrusted Dir C:\Users\Graham\Documents\My SqueakUndefinedObject(Object)>>doesNotUnderstand: #valueOfProperty:	Receiver: nil	Arguments and temporary variables: 		aMessage: 	valueOfProperty: nil		exception: 	MessageNotUnderstood: UndefinedObject>>valueOfProperty:		resumeValue: 	nil	Receiver's instance variables: nilGComponent>>model	Receiver: a GComponent(886222)	Arguments and temporary variables: 		o: 	a GComponent(1218743)	Receiver's instance variables: 		bounds: 	0@0 corner: 50@40		owner: 	a GComponent(1218743)		submorphs: 	#()		fullBounds: 	0@0 corner: 50@40		color: 	Color blue		extension: 	a MorphExtension (2322658) [other:  (borderStyle -> a BorderStyle)]GComponent>>DoIt	Receiver: a GComponent(886222)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	0@0 corner: 50@40		owner: 	a GComponent(1218743)		submorphs: 	#()		fullBounds: 	0@0 corner: 50@40		color: 	Color blue		extension: 	a MorphExtension (2322658) [other:  (borderStyle -> a BorderStyle)]Compiler>>evaluateCue:ifFail:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluateCue:ifFail:logged:		methodNode: 	DoIt	^ self model		method: 	(GComponent>>#DoIt "a CompiledMethod(2857291)")		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluateCue:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:to:environment:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	a ReadStream		aContext: 	nil		receiver: 	a GComponent(886222)		anEnvironment: 	Smalltalk		aRequestor: 	a SmalltalkEditor		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCue[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		morph: 	a TextMorphForEditView(169875)		selectionShowing: 	false		model: 	an Inspector		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $s and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 12 and rectangle 68@0 corner: 68@16 in...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: Color black}		lastParenLocation: 	nil		otherInterval: 	(12 to: 11)		oldInterval: 	(53 to: 52)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilBlockClosure>>on:do:	Receiver: [closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Arguments and temporary variables: 		exceptionOrExceptionSet: 	OutOfScopeNotification		handlerAction: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		handlerActive: 	true	Receiver's instance variables: 		outerContext: 	SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:		startpc: 	253		numArgs: 	0SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aBlock: 	[closure] in SmalltalkEditor(TextEditor)>>printIt		result: 	nil		rcvr: 	a GComponent(886222)		ctxt: 	nil	Receiver's instance variables: 		morph: 	a TextMorphForEditView(169875)		selectionShowing: 	false		model: 	an Inspector		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $s and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 12 and rectangle 68@0 corner: 68@16 in...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: Color black}		lastParenLocation: 	nil		otherInterval: 	(12 to: 11)		oldInterval: 	(53 to: 52)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>printIt	Receiver: a SmalltalkEditor	Arguments and temporary variables: 	Receiver's instance variables: 		morph: 	a TextMorphForEditView(169875)		selectionShowing: 	false		model: 	an Inspector		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $s and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 12 and rectangle 68@0 corner: 68@16 in...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: Color black}		lastParenLocation: 	nil		otherInterval: 	(12 to: 11)		oldInterval: 	(53 to: 52)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>printIt:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aKeyboardEvent: 	[68@10 keystroke '<Cmd-p>' (112) 421157234]	Receiver's instance variables: 		morph: 	a TextMorphForEditView(169875)		selectionShowing: 	false		model: 	an Inspector		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $s and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 12 and rectangle 68@0 corner: 68@16 in...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: Color black}		lastParenLocation: 	nil		otherInterval: 	(12 to: 11)		oldInterval: 	(53 to: 52)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>dispatchOnKeyboardEvent:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aKeyboardEvent: 	[68@10 keystroke '<Cmd-p>' (112) 421157234]		honorCommandKeys: 	true		typedChar: 	$p	Receiver's instance variables: 		morph: 	a TextMorphForEditView(169875)		selectionShowing: 	false		model: 	an Inspector		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $s and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 12 and rectangle 68@0 corner: 68@16 in...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: Color black}		lastParenLocation: 	nil		otherInterval: 	(12 to: 11)		oldInterval: 	(53 to: 52)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>keyStroke:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		anEvent: 	[68@10 keystroke '<Cmd-p>' (112) 421157234]	Receiver's instance variables: 		morph: 	a TextMorphForEditView(169875)		selectionShowing: 	false		model: 	an Inspector		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $s and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 12 and rectangle 68@0 corner: 68@16 in...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: Color black}		lastParenLocation: 	nil		otherInterval: 	(12 to: 11)		oldInterval: 	(53 to: 52)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nil[] in [] in TextMorphForEditView(TextMorph)>>keyStroke:	Receiver: a TextMorphForEditView(169875)	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		bounds: 	0@0 corner: 283@18		owner: 	a TransformMorph(2966606)		submorphs: 	#()		fullBounds: 	0@0 corner: 283@18		color: 	Color black		extension: 	a MorphExtension (3772374) [other:  (caretColor -> Color red) (unfoc...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for 'self model '		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(3314398)		acceptOnCR: 	falseTextMorphForEditView(TextMorph)>>handleInteraction:fromEvent:	Receiver: a TextMorphForEditView(169875)	Arguments and temporary variables: 		interactionBlock: 	[closure] in [] in TextMorphForEditView(TextMorph)>>keyStroke:...etc...		evt: 	[68@10 keystroke '<Cmd-p>' (112) 421157234]		oldEditor: 	a SmalltalkEditor		oldParagraph: 	a NewParagraph		oldText: 	a Text for 'self model '	Receiver's instance variables: 		bounds: 	0@0 corner: 283@18		owner: 	a TransformMorph(2966606)		submorphs: 	#()		fullBounds: 	0@0 corner: 283@18		color: 	Color black		extension: 	a MorphExtension (3772374) [other:  (caretColor -> Color red) (unfoc...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for 'self model '		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(3314398)		acceptOnCR: 	falseTextMorphForEditView>>handleInteraction:fromEvent:	Receiver: a TextMorphForEditView(169875)	Arguments and temporary variables: 		interActionBlock: 	[closure] in [] in TextMorphForEditView(TextMorph)>>keyStroke:...etc...		evt: 	[68@10 keystroke '<Cmd-p>' (112) 421157234]	Receiver's instance variables: 		bounds: 	0@0 corner: 283@18		owner: 	a TransformMorph(2966606)		submorphs: 	#()		fullBounds: 	0@0 corner: 283@18		color: 	Color black		extension: 	a MorphExtension (3772374) [other:  (caretColor -> Color red) (unfoc...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for 'self model '		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(3314398)		acceptOnCR: 	false[] in TextMorphForEditView(TextMorph)>>keyStroke:	Receiver: a TextMorphForEditView(169875)	Arguments and temporary variables: 		evt: 	[68@10 keystroke '<Cmd-p>' (112) 421157234]		action: 	nil	Receiver's instance variables: 		bounds: 	0@0 corner: 283@18		owner: 	a TransformMorph(2966606)		submorphs: 	#()		fullBounds: 	0@0 corner: 283@18		color: 	Color black		extension: 	a MorphExtension (3772374) [other:  (caretColor -> Color red) (unfoc...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for 'self model '		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(3314398)		acceptOnCR: 	falseStandardToolSet class>>codeCompletionAround:textMorph:keyStroke:	Receiver: StandardToolSet	Arguments and temporary variables: 		aBlock: 	[closure] in TextMorphForEditView(TextMorph)>>keyStroke:		aTextMorph: 	a TextMorphForEditView(169875)		evt: 	[68@10 keystroke '<Cmd-p>' (112) 421157234]	Receiver's instance variables: 		superclass: 	Object		methodDict: 	a MethodDictionary()		format: 	0		instanceVariables: 	nil		organization: 	('as yet unclassified')		subclasses: 	{CommandLineToolSet}		name: 	#StandardToolSet		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Tools-Base'ToolSet class>>codeCompletionAround:textMorph:keyStroke:	Receiver: ToolSet	Arguments and temporary variables: 		aBlock: 	[closure] in TextMorphForEditView(TextMorph)>>keyStroke:		aTextMorph: 	a TextMorphForEditView(169875)		evt: 	[68@10 keystroke '<Cmd-p>' (112) 421157234]	Receiver's instance variables: 		superclass: 	AppRegistry		methodDict: 	a MethodDictionary()		format: 	0		instanceVariables: 	nil		organization: 	('as yet unclassified')		subclasses: 	nil		name: 	#ToolSet		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'System-Applications'		registeredClasses: 	an OrderedCollection(StandardToolSet CommandLineToolSet)		default: 	StandardToolSet--- The full stack ---UndefinedObject(Object)>>doesNotUnderstand: #valueOfProperty:GComponent>>modelGComponent>>DoItCompiler>>evaluateCue:ifFail:Compiler>>evaluateCue:ifFail:logged:Compiler>>evaluate:in:to:environment:notifying:ifFail:logged:[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:BlockClosure>>on:do:SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:SmalltalkEditor(TextEditor)>>printItSmalltalkEditor(TextEditor)>>printIt:SmalltalkEditor(TextEditor)>>dispatchOnKeyboardEvent:SmalltalkEditor(TextEditor)>>keyStroke:[] in [] in TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView(TextMorph)>>handleInteraction:fromEvent:TextMorphForEditView>>handleInteraction:fromEvent:[] in TextMorphForEditView(TextMorph)>>keyStroke:StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:ToolSet class>>codeCompletionAround:textMorph:keyStroke: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView>>keyStroke:TextMorphForEditView(Morph)>>handleKeystroke:TextMorphForEditView(TextMorph)>>handleKeystroke:KeyboardEvent>>sentTo:TextMorphForEditView(Morph)>>handleEvent:TextMorphForEditView(Morph)>>handleFocusEvent:MorphicEventDispatcher>>doHandlingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEvent:with:TextMorphForEditView(Morph)>>processFocusEvent:using:TextMorphForEditView(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:KeyboardEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendKeyboardEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in MorphicProject>>spawnNewProcess[] in BlockClosure>>newProcess