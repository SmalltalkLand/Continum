MessageNotUnderstood: GScriptor>>test14 July 2019 12:47:15.267746 pmVM: Win32 - SmalltalkImage: Squeak5.2 [latest update: #18229]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir D:\ContinumTrusted Dir D:\Continum\GrahamUntrusted Dir C:\Users\Graham\Documents\My SqueakGScriptor(Object)>>doesNotUnderstand: #test	Receiver: a GScriptor	Arguments and temporary variables: 		aMessage: 	test		exception: 	MessageNotUnderstood: GScriptor>>test		resumeValue: 	nil	Receiver's instance variables: 		target: 	a GComponent(375875)		sel: 	nilPluggableTextMorph>>getText	Receiver: a PluggableTextMorph(2613203)	Arguments and temporary variables: 		newText: 	nil	Receiver's instance variables: 		bounds: 	0@0 corner: 150@120		owner: 	nil		submorphs: 	{a TransformMorph(4154715)}		fullBounds: 	nil		color: 	Color white		extension: 	a MorphExtension (1526214) [other:  (adornmentReadOnly -> Color blac...etc...		borderWidth: 	1		borderColor: 	Color aluminum		model: 	a GScriptor		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(2922343)		scroller: 	a TransformMorph(4154715)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	nil		getMenuTitleSelector: 	nil		hasFocus: 	false		hScrollBar: 	a ScrollBar(523162)		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	10		textMorph: 	a TextMorphForEditView(1535155)		getTextSelector: 	#test		setTextSelector: 	#accept:		getSelectionSelector: 	nil		hasUnacceptedEdits: 	false		askBeforeDiscardingEdits: 	true		selectionInterval: 	nil		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	nilPluggableTextMorph>>on:text:accept:readSelection:menu:	Receiver: a PluggableTextMorph(2613203)	Arguments and temporary variables: 		anObject: 	a GScriptor		getTextSel: 	#test		setTextSel: 	#accept:		getSelectionSel: 	nil		getMenuSel: 	nil	Receiver's instance variables: 		bounds: 	0@0 corner: 150@120		owner: 	nil		submorphs: 	{a TransformMorph(4154715)}		fullBounds: 	nil		color: 	Color white		extension: 	a MorphExtension (1526214) [other:  (adornmentReadOnly -> Color blac...etc...		borderWidth: 	1		borderColor: 	Color aluminum		model: 	a GScriptor		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(2922343)		scroller: 	a TransformMorph(4154715)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	nil		getMenuTitleSelector: 	nil		hasFocus: 	false		hScrollBar: 	a ScrollBar(523162)		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	10		textMorph: 	a TextMorphForEditView(1535155)		getTextSelector: 	#test		setTextSelector: 	#accept:		getSelectionSelector: 	nil		hasUnacceptedEdits: 	false		askBeforeDiscardingEdits: 	true		selectionInterval: 	nil		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	nilPluggableTextMorph class>>on:text:accept:readSelection:menu:	Receiver: PluggableTextMorph	Arguments and temporary variables: 		anObject: 	a GScriptor		getTextSel: 	#test		setTextSel: 	#accept:		getSelectionSel: 	nil		getMenuSel: 	nil	Receiver's instance variables: 		superclass: 	ScrollPane		methodDict: 	a MethodDictionary(size 138)		format: 	65568		instanceVariables: 	#('textMorph' 'getTextSelector' 'setTextSelector' 'getSelect...etc...		organization: 	('accessing' adoptPaneColor: editTextSelector editTextSelector: getTextSelector...etc...		subclasses: 	{AcceptableCleanTextMorph . MethodMorph . PluggableTextMorphWithModel...etc...		name: 	#PluggableTextMorph		classPool: 	a Dictionary(#AdornmentCache->a Dictionary(Color orange->Form(16x16x...etc...		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Morphic-Pluggable Widgets'		prototype: 	nilPluggableTextMorph class>>on:text:accept:	Receiver: PluggableTextMorph	Arguments and temporary variables: 		anObject: 	a GScriptor		getTextSel: 	#test		setTextSel: 	#accept:	Receiver's instance variables: 		superclass: 	ScrollPane		methodDict: 	a MethodDictionary(size 138)		format: 	65568		instanceVariables: 	#('textMorph' 'getTextSelector' 'setTextSelector' 'getSelect...etc...		organization: 	('accessing' adoptPaneColor: editTextSelector editTextSelector: getTextSelector...etc...		subclasses: 	{AcceptableCleanTextMorph . MethodMorph . PluggableTextMorphWithModel...etc...		name: 	#PluggableTextMorph		classPool: 	a Dictionary(#AdornmentCache->a Dictionary(Color orange->Form(16x16x...etc...		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Morphic-Pluggable Widgets'		prototype: 	nilGScriptor>>asMorph	Receiver: a GScriptor	Arguments and temporary variables: 	Receiver's instance variables: 		target: 	a GComponent(375875)		sel: 	nilUndefinedObject>>DoIt	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilCompiler>>evaluateCue:ifFail:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluateCue:ifFail:logged:		methodNode: 	DoIt	^ (GScriptor new target: GComponent new) asMorph openInWorld		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1918998)")		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluateCue:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:to:environment:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	a ReadStream		aContext: 	nil		receiver: 	nil		anEnvironment: 	Smalltalk		aRequestor: 	a SmalltalkEditor		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCue[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		morph: 	a TextMorphForEditView(603094)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $( and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 59 and rectangle 392@0 corner: 392@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(58 to: 58)		oldInterval: 	(2 to: 1)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilBlockClosure>>on:do:	Receiver: [closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Arguments and temporary variables: 		exceptionOrExceptionSet: 	OutOfScopeNotification		handlerAction: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		handlerActive: 	true	Receiver's instance variables: 		outerContext: 	SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:		startpc: 	253		numArgs: 	0SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aBlock: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelection		result: 	nil		rcvr: 	nil		ctxt: 	nil	Receiver's instance variables: 		morph: 	a TextMorphForEditView(603094)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $( and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 59 and rectangle 392@0 corner: 392@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(58 to: 58)		oldInterval: 	(2 to: 1)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>evaluateSelection	Receiver: a SmalltalkEditor	Arguments and temporary variables: 	Receiver's instance variables: 		morph: 	a TextMorphForEditView(603094)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $( and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 59 and rectangle 392@0 corner: 392@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(58 to: 58)		oldInterval: 	(2 to: 1)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>doIt	Receiver: a SmalltalkEditor	Arguments and temporary variables: 	Receiver's instance variables: 		morph: 	a TextMorphForEditView(603094)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $( and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 59 and rectangle 392@0 corner: 392@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(58 to: 58)		oldInterval: 	(2 to: 1)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>doIt:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aKeyboardEvent: 	[335@13 keystroke '<Cmd-d>' (100) 408820734]	Receiver's instance variables: 		morph: 	a TextMorphForEditView(603094)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $( and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 59 and rectangle 392@0 corner: 392@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(58 to: 58)		oldInterval: 	(2 to: 1)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>dispatchOnKeyboardEvent:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aKeyboardEvent: 	[335@13 keystroke '<Cmd-d>' (100) 408820734]		honorCommandKeys: 	true		typedChar: 	$d	Receiver's instance variables: 		morph: 	a TextMorphForEditView(603094)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $( and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 59 and rectangle 392@0 corner: 392@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(58 to: 58)		oldInterval: 	(2 to: 1)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>keyStroke:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		anEvent: 	[335@13 keystroke '<Cmd-d>' (100) 408820734]	Receiver's instance variables: 		morph: 	a TextMorphForEditView(603094)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $( and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 59 and rectangle 392@0 corner: 392@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(58 to: 58)		oldInterval: 	(2 to: 1)		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nil[] in [] in TextMorphForEditView(TextMorph)>>keyStroke:	Receiver: a TextMorphForEditView(603094)	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		bounds: 	0@0 corner: 435@18		owner: 	a TransformMorph(2774999)		submorphs: 	#()		fullBounds: 	0@0 corner: 435@18		color: 	Color black		extension: 	a MorphExtension (122719) [other:  (caretColor -> Color red) (unfocu...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for '(GScriptor new target: GComponent new) asMorph openInWorld'		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(124711)		acceptOnCR: 	false--- The full stack ---GScriptor(Object)>>doesNotUnderstand: #testPluggableTextMorph>>getTextPluggableTextMorph>>on:text:accept:readSelection:menu:PluggableTextMorph class>>on:text:accept:readSelection:menu:PluggableTextMorph class>>on:text:accept:GScriptor>>asMorphUndefinedObject>>DoItCompiler>>evaluateCue:ifFail:Compiler>>evaluateCue:ifFail:logged:Compiler>>evaluate:in:to:environment:notifying:ifFail:logged:[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:BlockClosure>>on:do:SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:SmalltalkEditor(TextEditor)>>evaluateSelectionSmalltalkEditor(TextEditor)>>doItSmalltalkEditor(TextEditor)>>doIt:SmalltalkEditor(TextEditor)>>dispatchOnKeyboardEvent:SmalltalkEditor(TextEditor)>>keyStroke:[] in [] in TextMorphForEditView(TextMorph)>>keyStroke: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -TextMorphForEditView(TextMorph)>>handleInteraction:fromEvent:TextMorphForEditView>>handleInteraction:fromEvent:[] in TextMorphForEditView(TextMorph)>>keyStroke:StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:ToolSet class>>codeCompletionAround:textMorph:keyStroke:TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView>>keyStroke:TextMorphForEditView(Morph)>>handleKeystroke:TextMorphForEditView(TextMorph)>>handleKeystroke:KeyboardEvent>>sentTo:TextMorphForEditView(Morph)>>handleEvent:TextMorphForEditView(Morph)>>handleFocusEvent:MorphicEventDispatcher>>doHandlingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEvent:with:TextMorphForEditView(Morph)>>processFocusEvent:using:TextMorphForEditView(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:KeyboardEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendKeyboardEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in MorphicProject>>spawnNewProcess[] in BlockClosure>>newProcess