IllegalResumeAttempt: 15 July 2019 7:52:10.556649 pmVM: Win32 - SmalltalkImage: Squeak5.2 [latest update: #18229]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir D:\ContinumTrusted Dir D:\Continum\GrahamUntrusted Dir C:\Users\Graham\Documents\My SqueakGException(Exception)>>resume:	Receiver: GException: 	Arguments and temporary variables: 		resumptionValue: 	nil	Receiver's instance variables: 		messageText: 	nil		tag: 	nil		signalContext: 	GException(Exception)>>signal		handlerContext: 	nil		outerContext: 	nilGException>>defaultAction	Receiver: GException: 	Arguments and temporary variables: 	Receiver's instance variables: 		messageText: 	nil		tag: 	nil		signalContext: 	GException(Exception)>>signal		handlerContext: 	nil		outerContext: 	nilUndefinedObject>>handleSignal:	Receiver: nil	Arguments and temporary variables: 		exception: 	GException: 	Receiver's instance variables: nilContext>>handleSignal:	Receiver: BlockClosure>>on:do:	Arguments and temporary variables: 		exception: 	GException: 		handlerActive: 	true		val: 	nil	Receiver's instance variables: 		sender: 	SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:		pc: 	32		stackp: 	3		method: 	(BlockClosure>>#on:do: "a CompiledMethod(40386)")		closureOrNil: 	nil		receiver: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:GException(Exception)>>signal	Receiver: GException: 	Arguments and temporary variables: 	Receiver's instance variables: 		messageText: 	nil		tag: 	nil		signalContext: 	GException(Exception)>>signal		handlerContext: 	nil		outerContext: 	nilGException class(Exception class)>>signal	Receiver: GException	Arguments and temporary variables: 	Receiver's instance variables: 		superclass: 	Exception		methodDict: 	a MethodDictionary(#defaultAction->(GException>>#defaultAction "a CompiledMethod...etc...		format: 	65541		instanceVariables: 	nil		organization: 	('as yet unclassified' defaultAction isResumable)		subclasses: 	{GExceptionCanResume}		name: 	#GException		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#GSysPasteUpMorph>>DoIt	Receiver: a PasteUpMorph(1798826) [world]	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	0@0 corner: 954@999		owner: 	nil		submorphs: 	{a PluggableSystemWindow<a PasteUpMorph(1798826) [world]>(3379366) ....etc...		fullBounds: 	0@0 corner: 954@999		color: 	(Color r: 0.25 g: 0.258 b: 0.266)		extension: 	a MorphExtension (1916773) [other:  (fillStyle -> an InfiniteForm) (...etc...		borderWidth: 	0		borderColor: 	(Color r: 0.75 g: 0.742 b: 0.734)		presenter: 	an EtoysPresenter (2957494)		model: 	a MorphicModel1(4107661)		cursor: 	1		padding: 	3		backgroundMorph: 	nil		turtleTrailsForm: 	nil		turtlePen: 	nil		lastTurtlePositions: 	nil		isPartsBin: 	nil		indicateCursor: 	nil		wantsMouseOverHalos: 	false		worldState: 	a WorldState		griddingOn: 	nilCompiler>>evaluateCue:ifFail:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluateCue:ifFail:logged:		methodNode: 	DoIt	^ GException signal		method: 	(PasteUpMorph>>#DoIt "a CompiledMethod(4080533)")		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluateCue:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:to:environment:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	a ReadStream		aContext: 	nil		receiver: 	a PasteUpMorph(1798826) [world]		anEnvironment: 	Smalltalk		aRequestor: 	a SmalltalkEditor		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		logFlag: 	true	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCue[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3417294)		selectionShowing: 	false		model: 	an Inspector		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $G and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 18 and rectangle 111@0 corner: 111@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5)}		lastParenLocation: 	nil		otherInterval: 	(17 to: 17)		oldInterval: 	nil		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilBlockClosure>>on:do:	Receiver: [closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Arguments and temporary variables: 		exceptionOrExceptionSet: 	OutOfScopeNotification		handlerAction: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:...etc...		handlerActive: 	true	Receiver's instance variables: 		outerContext: 	SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:		startpc: 	253		numArgs: 	0SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aBlock: 	[closure] in SmalltalkEditor(TextEditor)>>printIt		result: 	nil		rcvr: 	a PasteUpMorph(1798826) [world]		ctxt: 	nil	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3417294)		selectionShowing: 	false		model: 	an Inspector		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $G and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 18 and rectangle 111@0 corner: 111@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5)}		lastParenLocation: 	nil		otherInterval: 	(17 to: 17)		oldInterval: 	nil		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>printIt	Receiver: a SmalltalkEditor	Arguments and temporary variables: 	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3417294)		selectionShowing: 	false		model: 	an Inspector		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $G and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 18 and rectangle 111@0 corner: 111@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5)}		lastParenLocation: 	nil		otherInterval: 	(17 to: 17)		oldInterval: 	nil		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>printIt:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aKeyboardEvent: 	[190@35 keystroke '<Cmd-p>' (112) 520716015]	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3417294)		selectionShowing: 	false		model: 	an Inspector		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $G and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 18 and rectangle 111@0 corner: 111@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5)}		lastParenLocation: 	nil		otherInterval: 	(17 to: 17)		oldInterval: 	nil		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>dispatchOnKeyboardEvent:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aKeyboardEvent: 	[190@35 keystroke '<Cmd-p>' (112) 520716015]		honorCommandKeys: 	true		typedChar: 	$p	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3417294)		selectionShowing: 	false		model: 	an Inspector		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $G and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 18 and rectangle 111@0 corner: 111@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5)}		lastParenLocation: 	nil		otherInterval: 	(17 to: 17)		oldInterval: 	nil		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nilSmalltalkEditor(TextEditor)>>keyStroke:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		anEvent: 	[190@35 keystroke '<Cmd-p>' (112) 520716015]	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3417294)		selectionShowing: 	false		model: 	an Inspector		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character $G and rectangle 3@0 cor...etc...		pointBlock: 	a CharacterBlock with index 18 and rectangle 111@0 corner: 111@16 ...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5)}		lastParenLocation: 	nil		otherInterval: 	(17 to: 17)		oldInterval: 	nil		typeAhead: 	a WriteStream		history: 	a TextEditorCommandHistory		styler: 	nil[] in [] in TextMorphForEditView(TextMorph)>>keyStroke:	Receiver: a TextMorphForEditView(3417294)	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		bounds: 	0@0 corner: 283@18		owner: 	a TransformMorph(4072318)		submorphs: 	#()		fullBounds: 	0@0 corner: 283@18		color: 	Color black		extension: 	a MorphExtension (594710) [other:  (caretColor -> Color red) (unfocu...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for 'GException signal'		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(781813)		acceptOnCR: 	falseTextMorphForEditView(TextMorph)>>handleInteraction:fromEvent:	Receiver: a TextMorphForEditView(3417294)	Arguments and temporary variables: 		interactionBlock: 	[closure] in [] in TextMorphForEditView(TextMorph)>>keyStroke:...etc...		evt: 	[190@35 keystroke '<Cmd-p>' (112) 520716015]		oldEditor: 	a SmalltalkEditor		oldParagraph: 	a NewParagraph		oldText: 	a Text for 'GException signal'	Receiver's instance variables: 		bounds: 	0@0 corner: 283@18		owner: 	a TransformMorph(4072318)		submorphs: 	#()		fullBounds: 	0@0 corner: 283@18		color: 	Color black		extension: 	a MorphExtension (594710) [other:  (caretColor -> Color red) (unfocu...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for 'GException signal'		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(781813)		acceptOnCR: 	false--- The full stack ---GException(Exception)>>resume:GException>>defaultActionUndefinedObject>>handleSignal:Context>>handleSignal:GException(Exception)>>signalGException class(Exception class)>>signalPasteUpMorph>>DoItCompiler>>evaluateCue:ifFail:Compiler>>evaluateCue:ifFail:logged:Compiler>>evaluate:in:to:environment:notifying:ifFail:logged:[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:BlockClosure>>on:do:SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:SmalltalkEditor(TextEditor)>>printItSmalltalkEditor(TextEditor)>>printIt:SmalltalkEditor(TextEditor)>>dispatchOnKeyboardEvent:SmalltalkEditor(TextEditor)>>keyStroke:[] in [] in TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView(TextMorph)>>handleInteraction:fromEvent: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -TextMorphForEditView>>handleInteraction:fromEvent:[] in TextMorphForEditView(TextMorph)>>keyStroke:StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:ToolSet class>>codeCompletionAround:textMorph:keyStroke:TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView>>keyStroke:TextMorphForEditView(Morph)>>handleKeystroke:TextMorphForEditView(TextMorph)>>handleKeystroke:KeyboardEvent>>sentTo:[] in TextMorphForEditView(Morph)>>handleEvent:UndefinedObject>>beCurrentDuring:TextMorphForEditView(Morph)>>handleEvent:TextMorphForEditView(Morph)>>handleFocusEvent:MorphicEventDispatcher>>doHandlingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEvent:with:TextMorphForEditView(Morph)>>processFocusEvent:using:TextMorphForEditView(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:KeyboardEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendKeyboardEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in MorphicProject>>spawnNewProcess[] in BlockClosure>>newProcess